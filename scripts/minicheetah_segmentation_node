#!/usr/bin/env python

import os
import sys
import argparse
from PIL import Image
import numpy as np
import cv2

import torch
from torch.backends import cudnn
import torchvision.transforms as transforms

sys.path.append("/home/neofelis/seg_mapping_ws/src/segmentation-ros-wrapper/scripts/semantic-segmentation/")
import network
from optimizer import restore_snapshot
from datasets import cityscapes
from datasets import rellis3d
from config import assert_and_infer_cfg

# ROS
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class SegmentationNode:
    def __init__(self):
        self.set_up()
        self.get_net()
        rospy.init_node("segmentation_node", anonymous=True)
        self.img_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.callback, queue_size = 10, buff_size = 2**24)
        self.semantic_pub = rospy.Publisher("semantic_seg", Image, queue_size = 1)
        self.trav_pub = rospy.Publisher("trav_seg", Image, queue_size = 1)
        rospy.loginfo("Initialization Done. Running Inference...")

    def set_up(self):
        parser = argparse.ArgumentParser(description='demo')
        #parser.add_argument('--demo-image', type=str, default='', help='path to demo image', required=True)
        parser.add_argument('--snapshot', type=str, default='/home/neofelis/seg_mapping_ws/src/segmentation-ros-wrapper/scripts/semantic-segmentation/pretrained_models/best_epoch_5_mean-iu_0.47376.pth', help='pre-trained checkpoint')
        parser.add_argument('--arch', type=str, default='network.deepv3.DeepWV3Plus', help='network architecture used for inference')
        #parser.add_argument('--save-dir', type=str, default='./save', help='path to save your results')
        self.args = parser.parse_args()
        assert_and_infer_cfg(self.args, train_mode=False)
        cudnn.benchmark = False
        torch.cuda.empty_cache()
        self.args.dataset_cls = rellis3d

    def get_net(self):
        net = network.get_net(self.args, criterion=None)
        net = torch.nn.DataParallel(net).cuda()
        rospy.loginfo("Net built.")
        self.net, _ = restore_snapshot(net, optimizer=None, snapshot=self.args.snapshot, restore_optimizer_bool=False)
        self.net.eval()
        rospy.loginfo("Net restored.")

    def callback(self, img_msg):
        br = CvBridge()
        img = br.imgmsg_to_cv2(img_msg , desired_encoding="rgb8") #TODO: RGB or BGR?
        #print(img)
        mean_std = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        img_transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize(*mean_std)])
        img_tensor = img_transform(img)
        with torch.no_grad():
            img = img_tensor.unsqueeze(0).cuda()
            pred = self.net(img)
            rospy.loginfo("Inference done.")
        pred = pred.cpu().numpy().squeeze()
        pred = np.argmax(pred, axis=0)
        #print(pred)
        colorized = self.args.dataset_cls.colorize_mask(pred)
        colorized.save('color_mask.png')
        # Publish colorized pred
        colorized_msg = img_msg
        colorized_msg.data = np.array(colorized.convert('RGB')).tobytes()
        self.semantic_pub.publish(colorized_msg)
       


if __name__ == '__main__':
    node = SegmentationNode()
    rospy.spin()


if not os.path.exists(args.save_dir):
    os.makedirs(args.save_dir)

colorized = args.dataset_cls.colorize_mask(pred)
colorized.save(os.path.join(args.save_dir, 'color_mask.png'))

label_out = np.zeros_like(pred)
for label_id, train_id in args.dataset_cls.id_to_trainid.items():
    label_out[np.where(pred == train_id)] = label_id
    cv2.imwrite(os.path.join(args.save_dir, 'pred_mask.png'), label_out)
print('Results saved.')
